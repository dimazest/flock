[]
prelude =
 import os

 collections = (
     #'lv',
     #'kiev',
     #'bolzano',
     #'zurich',
     #'amsterdam',
     #'brussels',
     #'montreal',
     #'singapore',
     #'cologne',
     #'munich',

     #'RTS16',
     #'RTS17',
     #'lv2',

     '2017-08',
     '2018-03',
     '2018-05',
     #'RTS18',
 )

 collection_clusters = {
     'dev': '2015-04-04.through.2014-04-10_EN.cfg',
     'hour': '2015-04-04.through.2014-04-10_EN.cfg',

     'ublog-2015_for-yasi_1stweek': '2015-04-04.through.2014-04-10_EN.cfg',
     'ublog-2015_for-yasi_2ndweek': '2015-04-04.through.2014-04-10_EN.cfg',
     'ublog-2015_for-yasi_3rdweek': '2015-04-04.through.2014-04-10_EN.cfg',

     '2017': '2015-04-04.through.2014-04-10_EN.cfg',
     '2017-02-14': '2015-04-04.through.2014-04-10_EN.cfg',
     '2017-02-20': '2015-04-04.through.2014-04-10_EN.cfg',

     '2016-08-01': '2015-04-04.through.2014-04-10_EN.cfg',
     '2017-02-13': '2015-04-04.through.2014-04-10_EN.cfg',
     '2017-03-01': '2015-04-04.through.2014-04-10_EN.cfg',
     '2017-04-01': '2015-04-04.through.2014-04-10_EN.cfg',
     '2017-05-01': '2015-04-04.through.2014-04-10_EN.cfg',

     'brexit' : '2015-04-04.through.2014-04-10_EN.cfg',

     'lv': 'lv.cfg',
     'lv2': 'lv.cfg',
     'kiev': 'empty.cfg',
     'bolzano': 'empty.cfg',
     'zurich': 'empty.cfg',
     'amsterdam': 'empty.cfg',
     'brussels': 'empty.cfg',
     'montreal': 'empty.cfg',
     'singapore': 'empty.cfg',
     'cologne': 'empty.cfg',
     'munich': 'empty.cfg',

     'MB15': 'empty.cfg',
     'RTS16': 'empty.cfg',
     'RTS17': 'empty.cfg',
     'RTS18': 'empty.cfg',

     '2017-08': 'empty.cfg',
     '2018-03': 'empty.cfg',
     '2018-05': 'empty.cfg',

     '2017-fire': 'empty.cfg',
 }

 psql = 'psql -v ON_ERROR_STOP=1 -X -d twitter'

[.db.initialized]
recipe =
       bin/flock initdb &&
       touch %{target}

[tweets/db/%{collection}/%{name}.inserted]
dep.db = .db.initialized
dep.hydrate = tweets/hydrate/%{collection}/%{name}
dep.clusters = %{'clusters/{}'.format(collection_clusters[collection])}
recipe =
    [ ! -d tweets/db/%{collection}/ ] && mkdir tweets/db/%{collection}/

    time \
    %{'zcat' if name.endswith('.gz') else 'bzcat'} %{hydrate} \
    |\
    bin/flock -v debug insert \
    --collection=%{collection} \
    --clusters %{clusters} \
    --extract-retweets \
    %{'--language en' if collection.startswith(('201', 'RTS')) else ''} \
    && touch %{target}

[.tweets_%{collection}.inserted]
deps =
     %{'tweets/db/{c}/{n}.inserted'.format(c=collection, n=n) for n in sorted(os.listdir('tweets/hydrate/{}'.format(collection)))}
recipe =
       touch %{target}

[views/.filtered_tweets.created]
dep.db = .db.initialized
dep.view_definition = views/filtered_tweets.sql
dep.ratio = views/.user_mention_screen_name_ratio.created
recipe =
       echo drop materialized view if exists filtered_tweets cascade | %{psql}
       %{psql} < %{view_definition} &&
       touch %{target}

[views/.filtered_feature_counts.created]
dep.db = .db.initialized
dep.filtered_tweets = views/.filtered_tweets.created
dep.view_definition = views/filtered_feature_counts.sql
recipe =
       echo drop materialized view if exists filtered_feature_counts cascade | %{psql}
       %{psql} < %{view_definition} &&
       touch %{target}

[views/.feature_scores.created]
dep.db = .db.initialized
dep.filtered_feature_counts = views/.filtered_feature_counts.created
dep.feature_counts = views/.feature_counts.created
dep.view_definition = views/feature_scores.sql
recipe =
       echo drop materialized view if exists feature_scores cascade | %{psql}
       %{psql} < %{view_definition} &&
       touch %{target}

[views/.%{view}.created]
dep.db = .db.initialized
dep.view_definition = views/%{view}.sql
recipe =
       echo drop materialized view if exists %{view} cascade | %{psql}
       %{psql} < %{view_definition} &&
       touch %{target}

[views/.filtered_tweets.refreshed]
dep.view_created = views/.filtered_tweets.created
dep.ratio = views/.user_mention_screen_name_ratio.refreshed
deps = %{'.tweets_{collection}.inserted'.format(collection=collection) for collection in collections}
recipe =
       echo refresh materialized view filtered_tweets | %{psql} &&
       touch %{target}

[views/.filtered_feature_counts.refreshed]
dep.view_created = views/.filtered_feature_counts.created
dep.filtered_tweets = views/.filtered_tweets.refreshed
deps = %{'.tweets_{collection}.inserted'.format(collection=collection) for collection in collections}
recipe =
       echo refresh materialized view filtered_feature_counts | %{psql} &&
       touch %{target}

[views/.feature_scores.refreshed]
dep.view_created = views/.feature_scores.created
dep.filtered_feature_counts = views/.filtered_feature_counts.refreshed
dep.feature_counts = views/.feature_counts.refreshed
deps = %{'.tweets_{collection}.inserted'.format(collection=collection) for collection in collections}
recipe =
       echo refresh materialized view feature_scores | %{psql} &&
       touch %{target}

[views/.%{view}.refreshed]
dep.view_created = views/.%{view}.created
deps = %{'.tweets_{collection}.inserted'.format(collection=collection) for collection in collections}
recipe =
       echo refresh materialized view %{view} | %{psql} &&
       touch %{target}

[.near_matches_%{collection}.found]
dep.tweets = .tweets_%{collection}.inserted
recipe =
       echo delete from relation where collection = \'%{collection}\' | %{psql} &&
       bin/flock find_near_matches --collection %{collection} &&
       touch %{target}

[.stories_%{collection}.inserted]
dep.tweets = .tweets_%{collection}.inserted
dep.story = stories/%{collection}.json
recipe =
       echo delete from tweet_story where collection = \'%{collection}\' | %{psql} &&
       echo delete from story where collection = \'%{collection}\' | %{psql} &&
       bin/flock insert_stories --collection %{collection} %{story} &&
       touch %{target}

[eval/%{collection}/scripts_assr-topic.inserted]
dep.assr_topic = eval/%{collection}/scripts_assr-topic
recipe =
       bin/flock-web insert_eval_topics --assr_topic_file %{assr_topic} --collection %{collection} &&
       touch %{target}

[eval/%{collection}/topics.json.inserted]
dep.assr_topic = eval/%{collection}/scripts_assr-topic.inserted
dep.topics_json = eval/%{collection}/topics.json
recipe =
       bin/flock-web insert_eval_topics_json --topic_file %{topics_json} --collection %{collection} &&
       touch %{target}

[eval/%{collection}/pools-inserted/%{pool}.inserted]
dep.scripts_assr-topic = eval/%{collection}/scripts_assr-topic.inserted
dep.pool_file = eval/%{collection}/pools/%{pool}
recipe =
       mkdir -p eval/%{collection}/pools-inserted/ &&
       bin/flock-web insert_eval_relevance_judgements --collection %{collection} --qrels_file %{pool_file} &&
       touch %{target}

[eval/%{collection}/qrels-crowd.inserted]
dep.qrelsfile = eval/%{collection}/qrels-crowd
deps = %{'eval/{collection}/pools-inserted/{}.inserted'.format(p, collection=collection) for p in sorted(os.listdir('eval/{collection}/pools'.format(collection=collection)))}
recipe =
       bin/flock-web insert_eval_crowd_relevance_judgements --collection %{collection} --qrels_file %{qrelsfile} &&
       touch %{target}

[eval/%{collection}/eval_qrelsfile.inserted]
dep.qrelsfile = eval/%{collection}/eval_qrelsfile
dep.qrels-crowd.inserted = eval/%{collection}/qrels-crowd.inserted
recipe =
       bin/flock-web insert_eval_relevance_judgements --collection %{collection} --qrels_file %{qrelsfile} --set_judgments &&
       touch %{target}

[eval/%{collection}/qrels-sorted.inserted]
dep.qrelsfile = eval/%{collection}/qrels-sorted
dep.eval_qrelsfile.inserted = eval/%{collection}/eval_qrelsfile.inserted
recipe =
       bin/flock-web insert_eval_relevance_judgements --collection %{collection} --qrels_file %{qrelsfile} --set_position &&
       touch %{target}

[eval/%{collection}/eval_glosses.inserted]
dep.scripts_assr-topic = eval/%{collection}/scripts_assr-topic.inserted
dep.eval_glosses = eval/%{collection}/eval_glosses
recipe =
       bin/flock-web insert_eval_cluster_glosses --collection %{collection} --cluster_glosses_file %{eval_glosses} &&
       touch %{target}

[eval/%{collection}/eval_clusters.inserted]
dep.eval_glosses = eval/%{collection}/eval_glosses.inserted
dep.clusters_file = eval/%{collection}/eval_clusters
recipe =
       bin/flock-web insert_eval_clusters --collection %{collection} --clusters_file %{clusters_file} &&
       touch %{target}

[eval/%{collection}/gundog/feedback/mobile-%{mode}.txt]
dep.feedback_file = eval/%{collection}/qrels-crowd
dep.complete_file = eval/%{collection}/eval_qrelsfile
recipe =
       mkdir -p eval/%{collection}/gundog/feedback/

       bin/gundog prepare-feedback \
       --feedback-file %{feedback_file} \
       --complete-file %{complete_file} \
       --mode %{mode} \
       > %{target}

[eval/%{collection}/gundog/feedback/equivalence-mobile-%{mode}.txt]
dep.feedback_file = eval/%{collection}/qrels-crowd
dep.complete_file = eval/%{collection}/eval_qrelsfile
dep.equivalence_file = eval/%{collection}/eval_clusters
recipe =
       mkdir -p eval/%{collection}/gundog/feedback/

       bin/gundog prepare-feedback \
       --feedback-file %{feedback_file} \
       --complete-file %{complete_file} \
       --equivalence-file %{equivalence_file} \
       --mode %{mode} \
       > %{target}

[eval/%{collection}/gundog/feedback/nist.txt]
dep.feedback_file = eval/%{collection}/eval_qrelsfile
recipe =
       mkdir -p eval/%{collection}/gundog/feedback/

       bin/gundog prepare-feedback \
       --feedback-file %{feedback_file} \
       --complete-file %{feedback_file} \
       --mode majority \
       > %{target}

[eval/%{collection}/gundog/point/ngram-length(%{ngram_length})_spam-filter(%{spam_filter})_language(%{language})_extract-retweets(%{extract_retweets})_keep-retweets(%{keep_retweets})_negative-distance-threshold(%{negative_distance_threshold})_sample(%{sample})_feedback(%{feedback}).%{output_format}]
dep.topics_json = eval/%{collection}/topics.json
dep.feedback_file = eval/%{collection}/gundog/feedback/%{feedback}.txt
dep.topic_filter = eval/%{collection}/gundog/topic-filter.txt
deps = %{['tweets/hydrate/{}.gundog/{}'.format  (collection, f) for f in sorted(os.listdir('tweets/hydrate/{}.gundog/'.format(collection))) if f.endswith('.gz')]}
recipe =
       mkdir -p eval/%{collection}/gundog/point/

       nice \
       pv -tebrTp %{deps} |\
       gunzip |\
       bin/gundog point \
       --topic-file %{topics_json} \
       --ngram-length %{ngram_length} \
       --spam-filter %{spam_filter} \
       --language %{language} \
       %{'--extract-retweets' if extract_retweets == '1' else ''} \
       %{'--keep-retweets' if keep_retweets == '1' else ''} \
       --feedback-file %{feedback_file} \
       --negative-distance-threshold %{negative_distance_threshold} \
       --sample %{sample} \
       --topic-filter %{topic_filter} \
       --output-format %{'jsonl' if output_format == 'point.jsonl' else 'csv'} \
       > '%{target}'

[eval/%{collection}/gundog/point/ngram-length(%{ngram_length})_feedback-pattern(%{feedback_pattern})_feedback(%{feedback})_pattern-mode(%{pattern_mode})_spam-filter(%{spam_filter}).point]
extract_retweets = 0
keep_retweets = 1
negative_distance_threshold = 0.8
sample = 1
language = en
dep.topics_json = eval/%{collection}/topics.json
dep.feedback_file = eval/%{collection}/gundog/feedback/%{feedback}.txt
dep.topic_filter = eval/%{collection}/gundog/topic-filter.txt
dep.pattern_file = eval/%{collection}/gundog/point/ngram-length(%{ngram_length})_spam-filter(%{spam_filter})_language(en)_extract-retweets(%{extract_retweets})_keep-retweets(%{keep_retweets})_negative-distance-threshold(%{negative_distance_threshold})_sample(%{sample})_feedback(%{feedback_pattern}).point
deps = %{['tweets/hydrate/{}.gundog/{}'.format  (collection, f) for f in sorted(os.listdir('tweets/hydrate/{}.gundog/'.format(collection))) if f.endswith('.gz')]}
recipe =
       mkdir -p eval/%{collection}/gundog/point/

       nice \
       pv -tebrTp %{deps} |\
       gunzip |\
       bin/gundog point \
       --topic-file %{topics_json} \
       --ngram-length %{ngram_length} \
       --spam-filter %{spam_filter} \
       --language %{language} \
       %{'--extract-retweets' if extract_retweets == '1' else ''} \
       %{'--keep-retweets' if keep_retweets == '1' else ''} \
       --feedback-file %{feedback_file} \
       --negative-distance-threshold %{negative_distance_threshold} \
       --sample %{sample} \
       --topic-filter %{topic_filter} \
       --pattern-file '%{pattern_file}' \
       --pattern-mode %{pattern_mode} \
       > '%{target}'
 
[gundog1]
type = task
deps =
     eval/RTS17/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.8)_sample(1)_feedback(nist).point
     eval/RTS17/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.8)_sample(1)_feedback(mobile-majority).point

     eval/RTS17/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.8)_sample(1)_feedback(equivalence-mobile-majority).point
     eval/RTS17/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.8)_sample(1)_feedback(equivalence-mobile-majority).point.jsonl

[gundog-dev]
type = task
deps =
     eval/RTS16/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.8)_sample(1)_feedback(nist).point
     eval/RTS16/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.7)_sample(1)_feedback(nist).point
     eval/RTS16/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.6)_sample(1)_feedback(nist).point

[gundog-basic-filter]
type = task
deps =
     eval/RTS16/gundog/point/ngram-length(3)_spam-filter(basic)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.8)_sample(1)_feedback(nist).point

     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(mobile-majority)_feedback(nist)_pattern-mode(exact)_spam-filter(basic).point
     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(mobile-majority)_feedback(nist)_pattern-mode(amount)_spam-filter(basic).point
     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(equivalence-mobile-majority)_feedback(nist)_pattern-mode(exact)_spam-filter(basic).point
     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(equivalence-mobile-majority)_feedback(nist)_pattern-mode(amount)_spam-filter(basic).point


[gundog-rogue]
type = task
deps =
     eval/RTS17/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.8)_sample(1)_feedback(nist).point
     eval/RTS17/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.7)_sample(1)_feedback(nist).point
     eval/RTS17/gundog/point/ngram-length(3)_spam-filter(none)_language(en)_extract-retweets(0)_keep-retweets(1)_negative-distance-threshold(0.6)_sample(1)_feedback(nist).point

[gundog-feedback]
type = task
deps =
     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(mobile-majority)_feedback(nist)_pattern-mode(exact)_spam-filter(none).point
     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(mobile-majority)_feedback(nist)_pattern-mode(amount)_spam-filter(none).point
     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(equivalence-mobile-majority)_feedback(nist)_pattern-mode(exact)_spam-filter(none).point
     eval/RTS17/gundog/point/ngram-length(3)_feedback-pattern(equivalence-mobile-majority)_feedback(nist)_pattern-mode(amount)_spam-filter(none).point

[universe]
type = task
deps =
     # %{'.stories_{collection}.inserted'.format(collection=collection) for collection in collections}
     eval/MB15/eval_qrelsfile.inserted
     eval/MB15/topics.json.inserted
     eval/RTS16/qrels-sorted.inserted
     eval/RTS16/eval_glosses.inserted
     eval/RTS16/eval_clusters.inserted
     eval/RTS17/topics.json.inserted
     eval/RTS17/qrels-sorted.inserted
     eval/lv2/scripts_assr-topic.inserted
     eval/lv2/topics.json.inserted
     # %{'.near_matches_{collection}.found'.format(collection=collection) for collection in collections}
     # #views/.tweet_representative.refreshed
     # ##views/.filtered_tweets.refreshed
     # ##views/.feature_counts.refreshed
     # views/.filtered_feature_counts.refreshed
     # views/.feature_scores.refreshed
     views/.screen_names.refreshed
     views/.hashtags.refreshed
     views/.user_mentions.refreshed

[vacuum]
deps =
     universe
type = task
recipe =
       echo vacuum analyze verbose | %{psql}

[initdb]
type = task
deps =
     .db.initialized

[dropdb]
type = task
recipe =
       bin/flock dropdb
       [ -e .db.initialized ] && rm .db.initialized
